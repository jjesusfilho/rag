usethis::edit_r_environ
usethis::edit_r_environ()
?edit_file
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/subir_arquivos.R")
usethis::edit_r_environ()
a <- JurisMiner::listar_arquivos("data-raw")
subir_arquivos(a)
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/listar_arquivos.R")
s <- listar_arquivos()
View(s)
ids_arquivos <- s
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/criar_assistente.R")
assistente <- criar_assistente(ids_arquivos = df$id[1:2],
"multaPenal",
instrucoes = "Você é um assistente que extrair informações das certidões de inscrição na dívida ativa")
assistente <- criar_assistente(ids_arquivos = ids_arquivos$id[1:2],
"multaPenal",
instrucoes = "Você é um assistente que extrair informações das certidões de inscrição na dívida ativa")
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/criar_thread.R")
perguntas <- c("Quantos dias multa? retorne somente o número",
"Qual a descrição da infração?")
colunas <- c("dias_multa", "infracao")
thread <- criar_thread(perguntas, perguntas, ids_arquivos$id[1:2])
thread <- criar_thread(perguntas, colunas, ids_arquivos$id[1:2])
api_key <- Sys.getenv("OPENAI_API_KEY")
corpo2 <- list(messages = jus_prompt(perguntas, colunas))
corpo2$messages[[1]]$file_ids <- as.list(ids_arquivos)
headers <- c(`Authorization`  = glue::glue("Bearer {api_key}"),
`Content-Type` = "application/json",
`OpenAI-Beta` = "assistants=v1")
r2 <-  "https://api.openai.com/v1/threads" |>
httr2::request() |>
httr2::req_headers(!!!headers) |>
httr2::req_body_json(corpo2) |>
httr2::req_perform()
corpo2
s <- ids_arquivos
ids_arquivos <- s$id[1:2]
corpo2 <- list(messages = jus_prompt(perguntas, colunas))
corpo2
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/criar_thread.R")
corpo2 <- list(messages = jus_prompt(perguntas, colunas))
corpo2
corpo2$messages[[1]]$file_ids <- as.list(ids_arquivos)
corpo2
corpo2 <- list(messages = jus_prompt(perguntas, colunas))
corpo2
as.list(ids_arquivos)
corpo2$messages[[1]]$file_ids <- as.list(ids_arquivos)
corpo2
headers <- c(`Authorization`  = glue::glue("Bearer {api_key}"),
`Content-Type` = "application/json",
`OpenAI-Beta` = "assistants=v1")
r2 <-  "https://api.openai.com/v1/threads" |>
httr2::request() |>
httr2::req_headers(!!!headers) |>
httr2::req_body_json(corpo2) |>
httr2::req_perform()
r2
b <-  r2 |>
httr2::resp_body_string() |>
jsonlite::fromJSON() |>
purrr::pluck("id")
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/verificar_thread.R")
r2
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/rodar_thread.R")
thead
thread
r
thread <- b
b
url_thread <- rodar_thread(thread, assistente)
url_thread
verifica <- verificar_thread(url_thread)
verifica
jqr::jq(verifica)
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/obter_resposta.R")
resposta <- obter_resposta(thread)
resposta
obter_resposta(thread)
id_thread
id_thread <- thread
url_mensagem <- glue::glue("https://api.openai.com/v1/threads/{id_thread}/messages")
headers <- c(`Authorization`  = glue::glue("Bearer {api_key}"),
`Content-Type` = "application/json",
`OpenAI-Beta` = "assistants=v1")
url_mensagem |>
httr2::request() |>
httr2::req_headers(!!!headers) |>
httr2::req_perform() |>
httr2::resp_body_string() |>
jsonlite::fromJSON()
perguntas <- c("qual a data da sentenca?")
colunas <- c("data")
thread <- criar_thread(perguntas, colunas, ids_arquivos$id)
thread <- criar_thread(perguntas, colunas, ids_arquivos)
url_thread <- rodar_thread(thread, assistente)
verifica <- verificar_thread(url_thread)
verifica
verifica <- verificar_thread(url_thread)
jqr::jq(verifica)
resposta <- obter_resposta(thread)
resposta
id_thread <- thread
url_mensagem <- glue::glue("https://api.openai.com/v1/threads/{id_thread}/messages")
url_mensagem |>
httr2::request() |>
httr2::req_headers(!!!headers) |>
httr2::req_perform() |>
httr2::resp_body_string() |>
jsonlite::fromJSON()
View(criar_thread)
View(listar_arquivos)
View(subir_arquivos)
View(criar_assistente)
source("/dados_app/usuarios/jose/projetos/pacotes/rag/R/criar_thread.R")
perguntas <- c("qual a classe-assunto?")
colunas <- c("classe")
id_thread <- criar_thread(perguntas, colunas, ids_arquivos)
url_thread <- rodar_thread(id_thread, assistente)
verifica <- verificar_thread(url_thread)
jqr::jq(verifica)
verifica <- verificar_thread(url_thread)
verifica
jqr::jq(verifica)
verifica <- verificar_thread(url_thread)
jqr::jq(verifica)
resposta <- obter_resposta(thread)
resposta
resposta <- obter_resposta(id_thread)
resposta
x <- sample(1:20, 10)
x
sd(x)
?sd
var(x)
mean(x)
9 + sd(x)
9 - sd(x)
x <- sort(x)
x
x <- sample(1:100, 30)
x <- sort(x)
x
sd(x)
var(x)
mean(x)
43.43+3*sd(x)
43.43-3*sd(x)
mean(x)
mean(x)-(3*sd(x))
mean(x)+(3*sd(x))
sd(x)
mean(x)+(2*sd(x))
mean(x)-(2*sd(x))
x1 <- c(80,100,120,140,160)
x1
sd(x1)
x1 <- c(80,100,120,140,160,180)
sd(x1)
x1 <- seq(80,180, 10)
x1
sd(x1)
s <- 1:1000
s <- rnorm(1000)
s
m <- mean(s)
m
ss <- sd(s)
x <- 0.975
(x-m)/ss
max(s)
min(s)
s <- rnorm(10000)
m <- mean(s)
m
s <- rnorm(100000)
m <- mean(s)
m
ss <- sd(s)
ss
x <- 0.975
(x-m)/ss
?quantile()
percentile
y <- quantile(x, .95)
y
y <- quantile(x, .5)
y
x
y <- quantile(s, .5)
y
y <- quantile(s, .95)
y
y <- quantile(s, .975)
y
y <- quantile(s, .0125)
y
y <- quantile(s, .125)
y
y <- quantile(s, .25)
y
1-.975
y <- quantile(s, .025)
y
s <- rnorm(1000000)
quantile(s, .025)
max(s)
quantile(s, .5)
quantile(s, c(.025, .5, .975))
k <- 100-95.44
k
k <- k/2
k
100-k
quantile(s, c(.0228, .5, .9772))
